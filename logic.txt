아래는 위의 설명을 바탕으로 한 실행 컨텍스트 시각화를 위한 로직 단계의 요약입니다.

코드 입력 및 저장

사용자 입력을 코드 에디터에 저장.
실시간으로 코드가 저장되는 모습을 표시.
코드 파싱

Acorn을 사용하여 코드를 AST로 파싱.
AST 트리 구조를 그래픽으로 시각화.
전역 실행 컨텍스트 생성

전역 스코프에 변수와 함수 정의.
전역 실행 컨텍스트를 시각화 영역에 표시.
코드 실행

코드의 각 줄을 순차적으로 실행.
setTimeout 호출 시 타이머 설정 및 태스크 큐 업데이트.
함수 선언 및 호출 시 호출 스택 업데이트.
타이머 설정 및 태스크 큐 업데이트

각 타이머의 지연 시간에 따라 콜백 함수가 태스크 큐에 추가됨을 표시.
이벤트 루프 및 단계별 처리

이벤트 루프의 각 단계(Timers, Pending Callbacks, Poll, Check, Close Callbacks)를 시각화.
각 단계에서 호출 스택과 태스크 큐의 변화를 표시.
콜백 함수 실행 및 시각화 업데이트

타이머 완료 시 콜백 함수가 호출 스택으로 이동하여 실행됨을 표시.
실행된 콜백 함수가 호출 스택에서 제거됨을 시각화.
최종 상태 정리

모든 작업이 완료되고, 호출 스택과 태스크 큐가 비어있음을 표시.
이벤트 루프가 대기 상태임을 시각적으로 보여줌.

######

스텝 버튼을 눌렀을 때의 동작 순서
1단계: 초기 상태
현재 실행 컨텍스트: 전역 실행 컨텍스트 생성
전역 변수: setTimeout 함수, d 함수에 대한 참조
타이머 큐: a (1초 후), b (0.5초 후), c (0초 후) 등록
2단계: 첫 번째 스텝 (첫 번째 setTimeout 호출)
현재 상태 표시:
타이머 큐: a (1초 후), b (0.5초 후), c (0초 후)
setTimeout 함수 호출:
function a()를 1초 후에 실행하도록 예약
변수 상태: 변수는 아직 할당되지 않음 (변수는 전역 컨텍스트에만 존재)
3단계: 두 번째 스텝 (두 번째 setTimeout 호출)
현재 상태 표시:
타이머 큐: b (0.5초 후), c (0초 후), a (1초 후)
setTimeout 함수 호출:
function b()를 0.5초 후에 실행하도록 예약
4단계: 세 번째 스텝 (세 번째 setTimeout 호출)
현재 상태 표시:
타이머 큐: c (0초 후), b (0.5초 후), a (1초 후)
setTimeout 함수 호출:
function c()를 0초 후에 실행하도록 예약
5단계: 네 번째 스텝 (d 함수 호출)
현재 상태 표시:
타이머 큐: c (0초 후), b (0.5초 후), a (1초 후)
function d() 호출:
현재 실행: d()가 호출됨 (값이 없으므로 반환값은 undefined)
변수 상태 업데이트: d()가 호출되어 실행되었지만, 상태 변화 없음
6단계: 다섯 번째 스텝 (이벤트 루프 - c 실행)
현재 상태 표시:
타이머 큐: b (0.5초 후), a (1초 후)
function c() 실행:
현재 실행: c()가 실행됨 (비어있는 함수)
변수 상태: c()가 실행되었지만, 상태 변화 없음
7단계: 여섯 번째 스텝 (이벤트 루프 - b 실행)
현재 상태 표시:
타이머 큐: a (1초 후)
function b() 실행:
현재 실행: b()가 실행됨 (비어있는 함수)
변수 상태: b()가 실행되었지만, 상태 변화 없음
8단계: 일곱 번째 스텝 (이벤트 루프 - a 실행)
현재 상태 표시:
타이머 큐: 비어 있음
function a() 실행:
현재 실행: a()가 실행됨 (비어있는 함수)
변수 상태: a()가 실행되었지만, 상태 변화 없음
종료 상태
모든 스텝을 마친 후:
타이머 큐: 비어 있음
모든